<!--
    Author	JO Hyeong-Ryeol
    Since	2013.03.31
    Version	$Id$

    Copyright (C) 2013 JO Hyeong-Ryeol. All rights reserved.   
-->
<Window x:Class="NicenisTestGui.DragDropTestWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:n="clr-namespace:Nicenis.Windows;assembly=Nicenis"
        Title="DragDropTestWindow" Height="300" Width="300" DataContext="DataContext">
    <Window.Resources>
        <DataTemplate x:Key="testTemplate">
            <Border Background="AliceBlue">
                <TextBlock>
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                    <Setter Property="Text" Value="null" />
                                </DataTrigger>
                            </Style.Triggers>

                            <Setter Property="Text" Value="{Binding}" />
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </Border>
        </DataTemplate>
    </Window.Resources>

    <Grid
        n:DragSource.PreviewDragSensing="Grid_PreviewDragSensing"
        n:DragSource.DragSensing="Grid_DragSensing"
        n:DragSource.PreviewDragging="Grid_PreviewDragging"
        n:DragSource.Dragging="Grid_Dragging"
        n:DragSource.PreviewGiveFeedback="Grid_PreviewGiveFeedback"
        n:DragSource.GiveFeedback="Grid_GiveFeedback"
        n:DragSource.PreviewQueryContinueDrag="Grid_PreviewQueryContinueDrag"
        n:DragSource.QueryContinueDrag="Grid_QueryContinueDrag"
        n:DragSource.PreviewDropped="Grid_PreviewDropped"
        n:DragSource.Dropped="Grid_Dropped"
        >
        <Border x:Name="theBorder"
                Margin="40"
                BorderBrush="Black"
                n:DragSource.AllowDrag="True"
                n:DragSource.Data="Test"
                n:DragSource.AllowedEffects="Copy"
                n:DragSource.AllowedInitiators="Mouse"
                n:DragSource.PreviewDragSensing="Border_PreviewDragSensing"
                n:DragSource.DragSensing="Border_DragSensing"
                n:DragSource.PreviewDragging="Border_PreviewDragging"
                n:DragSource.Dragging="Border_Dragging"
                n:DragSource.PreviewGiveFeedback="Border_PreviewGiveFeedback"
                n:DragSource.GiveFeedback="Border_GiveFeedback"
                n:DragSource.PreviewQueryContinueDrag="Border_PreviewQueryContinueDrag"
                n:DragSource.QueryContinueDrag="Border_QueryContinueDrag"
                n:DragSource.PreviewDropped="Border_PreviewDropped"
                n:DragSource.Dropped="Border_Dropped"
                n:DragSource.VisualFeedbackOffset="{Binding (n:DragSource.ContactPosition), RelativeSource={RelativeSource Self}}"
                n:DragSource.VisualFeedbackMinWidth="200"
                n:DragSource.VisualFeedbackMinHeight="300"
                AllowDrop="True"
                n:DropTarget.IsActivated="True"
                n:DropTarget.DragHoverEventMode="Once"
                n:DropTarget.PreviewDragHover="theBorder_PreviewDragHover"
                n:DropTarget.DragHover="theBorder_DragHover"
                >
            <Border.Style>
                <Style TargetType="Border">
                    <Style.Triggers>
                        <Trigger Property="n:DragSource.IsDragging" Value="True">
                            <Setter Property="Background" Value="Blue" />
                        </Trigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="Green" />
                </Style>
            </Border.Style>
            
            <Border.Triggers>
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation
                                Storyboard.TargetName="theBorder" 
                                Storyboard.TargetProperty="Margin"
                                To="20" Duration="0:0:2" 
                                AutoReverse="True" RepeatBehavior="Forever" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Border.Triggers>
            
            <!--<n:DragSource.VisualFeedback>
                <Border Background="Red">
                    <TextBlock Text="{Binding}" />
                </Border>
            </n:DragSource.VisualFeedback>-->
            
            <!--<n:DragSource.VisualFeedbackTemplate>
                <DataTemplate>
                    <Border Background="AliceBlue">
                        <TextBlock>
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                            <Setter Property="Text" Value="null" />
                                        </DataTrigger>
                                    </Style.Triggers>

                                    <Setter Property="Text" Value="{Binding}" />
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Border>
                </DataTemplate>
            </n:DragSource.VisualFeedbackTemplate>-->

            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock Background="Red">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding (n:DropTarget.IsDragHover), RelativeSource={RelativeSource AncestorType=Border}}" Value="True">
                                    <Setter Property="Text" Value="Is DragHover" />
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="Drag and Drop Test" />
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <TextBlock Background="Red">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding (n:DropTarget.IsDragOver), RelativeSource={RelativeSource AncestorType=Border}}" Value="True">
                                    <Setter Property="Text" Value="Is DragOver" />
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="" />
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
            </StackPanel>
        </Border>
    </Grid>
</Window>
